
part1
What is meant by IAC and how this benefits IT Infrastrure team
what is meant by terraform, what are competetion 
Installing terraform
Configuring keys in terraform

Part2.
Understanding the providers,Resources and variables,output
Writing terraform files.
Stages of execution 
terraform init
terraform validate
terraform plan
Terraform has "Planning" steo where it generates the exeution plan,Plan will be trigerred  
when you execute apply
Terraform let you to avoid any suprises when Terraform manipulates the infra
terraform apply
Understanding the terraform state files.

Use cases:Spinning up of docker container from image using terraform.
Use cases:Create a instance withh key_name(already exist)
Use cases: Create a instance with a new key_name file with file varibles

part3:
Understanding ther varibles in terraform.
files
maps and lookups

Understanding the looping in terraform.

Usecase: create multiple instances in terraform
Usecase: create IAM users in terraform

----------------------------------------------------------
Day 2

terraform state show 
Terraform refresh: Reconciling real-world drift
lifecycle option 
	- delete option 

#IAM users
		- using count 
		- Using list custom list

#S3 bucket
		 - Bucket creation
		 - Bucket life cycle creation 

#terraform show 
------------------
	will show all the output/metadata of the resource

[root@kworkernode1 example1]# terraform show
# docker_container.container_id:
resource "docker_container" "container_id" {
    attach           = false
    gateway          = "172.17.0.1"
    id               = "cfc9e3d4bfec8657a83100d71d00bf5174cff63e6bfd9b76bf3d3c25db70b348"
    image            = "sha256:f3b796dbbc456ea9d1dfe7391f9265cf3c529ae6eb6b6c519db9f54e3e758d6a"
    ip_address       = "172.17.0.2"
    ip_prefix_length = 16
    log_driver       = "json-file"
    logs             = false
    must_run         = true
    name             = "myblog"
    network_data     = [
        {
            gateway          = "172.17.0.1"
            ip_address       = "172.17.0.2"
            ip_prefix_length = 16
            network_name     = "bridge"
        },
    ]
    restart          = "no"
    rm               = false
    start            = true

    ports {
        external = 801
        internal = 2368
        ip       = "0.0.0.0"
        protocol = "tcp"
    }
}

# docker_image.image_id:
resource "docker_image" "image_id" {
    id     = "sha256:f3b796dbbc456ea9d1dfe7391f9265cf3c529ae6eb6b6c519db9f54e3e758d6adocker.io/ghost"
    latest = "sha256:f3b796dbbc456ea9d1dfe7391f9265cf3c529ae6eb6b6c519db9f54e3e758d6a"
    name   = "docker.io/ghost"
}

Outputs:

container_name = "myblog"
ip_address = "172.17.0.2"

terraform state show
----------------------------
To inspect only specfic resources

 terraform state show aws_instance.example

terraform refresh
-------------------
What Terraform is doing here is reconciling the resources tracked by the state file with the real world

It does this by querying your infrastructure providers to find out what's actually running and the current configuration, and updating the state file with this new information. Terraform is designed to co-exist with other tools as well as manually provisioned resources and so it only refreshes resources under its management.

Notes:
Running refresh does not modify infrastructure, but does modify the state file

[root@kworkernode1 example2]# cksum terraform.tfstate
1438403226 5653 terraform.tfstate

Do the changes to the resources
[root@kworkernode1 example2]# cksum terraform.tfstate
452845953 5701 terraform.tfstate


Lifecycle options: Configuring how Terraform manages drift
----------------------------------------------------------------
Preventing Reprovision of Resource using Lifecycle Hooks

lifecycle {
    prevent_destroy = true
  }

Terraform provides some lifecycle configuration options for every resource, regardless of provider, that give you more control over how Terraform reconciles your desired configuration against state when generating plans.

One of these options is prevent_destroy. When this is set to true, any plan that includes a destroy of this resource will return an error message. Use this flag to provide extra protection against the accidental deletion of any essential resources


Life cycle hooks
----------------------------------------

resource "digitalocean_droplet" "db" {
    lifecycle {
        prevent_destroy = true
        ignore_changes = ["image", ]
    }
}

By adding the ignore_changes  parameter to the lifecycle  block, we can tell our Terraform resource definition to ignore any changes to the image  field. This makes sure that Terraform does not attempt to reprovision the resource whenever the image changes

what is IAC
The idea behind infrastructure as code (IAC) is 
that you write and execute code to define, deploy, and update your infrastructure

There are 4 broad catagories of IAC tools:

1. Ad hoc scripts
2. Configration Management tools
3. Sever templating tools
4. Orchestration tools

Adhoc scripts:: Bash Ruby python
Configration Management tools:  Like Ansible,chef,puppet
Server templating tools: packer,docker
Ocherstration tools: Terraform,Cloud formation

Benefits of the IAC

Verion control
	You can store your IAC source files in version control, which means the entire history of your infrastructure is now captured in the commit log

Automation and Faster
	If the deployment process is automated, itâ€™ll be significantly faster, since a computer can carry out the deployment steps far faster than a person, and safer, since an automated process will be more consistent, more repeatable, and not prone to manual error

Documentation
	In other words, IAC acts as documentation, allowing everyone in the organization to understand how things work.

Code reusbility
	Code can reused by changing the setting and provisiong the resources.

Preview and validation
	ESP in terraform  we can preview the code before apply to the cloud.

Reability
	It is having good readbility.

	resource "aws_instance" "example" {
  ami = "ami-40d28157"
  instance_type = "t2.micro"
}

resource "dnsimple_record" "example" {
  domain = "example.com"
  name = "test"
  value = "${aws_instance.example.public_ip}"
  type = "A"
}


Terraform
---------------
open source tool that allows you to define your infrastructure as code using a simple, declarative programming language
and to deploy and manage that infrastructure across a variety of cloud providers (including Amazon Web Services, Azure, Google Cloud, DigitalOcean, and many others) using a few commands.

Terraform is an open source tool written in the Go programming language.The Go code compiles down into a single binary
called, not surprisingly, terraform.

It Uses HCL,it uses a Json syntax ,It almost supports 60+ providers through API Interation 

Terraform vs other tools.
------------------------------
Procedural vs declartive model.
Procedural code does NOT fully capture the state of the infrastructure
Client/server architecture vs client-only architecture

Installing terraform
---------------------
Download the Binary from https://www.terraform.io/downloads.html
unzip it


To check if terraform is working 

> terraform
usage: terraform [--version] [--help] <command> [<args>]

Available commands are:
    apply       Builds or changes infrastructure
    destroy     Destroy Terraform-managed infrastructure
    get         Download and install modules for the configuration
    graph       Create a visual graph of Terraform resources
    (...)

Configuring the keys
----------------------

Method-1:
---------
provider "aws" {
  access_key = "${var.aws_access_key}"
  secret_key = "${var.aws_secret_key}"
  region     = "us-east-1"
}

Method 2:
-------------
As environment variables
Providing the creds as env variables
$ export AWS_ACCESS_KEY_ID="anaccesskey"
$ export AWS_SECRET_ACCESS_KEY="asecretkey"
$ export AWS_DEFAULT_REGION="us-west-2

Method3:
--------
provider "aws" {
  region                  = "us-west-2"
  shared_credentials_file = "/Users/tf_user/.aws/creds"
  profile                 = "customprofile"
}

Understanding the resource and providers
---------------------------------------
Providers:
 	A provider is responsible for understanding API interations and exposing the resources.
 	mandatory data that is required for providers is
		- Name of the provider
		- Keys required that need to connect 
		- Region and profile

Example:
provider "aws" {
  region                  = "us-west-2"
  shared_credentials_file = "/Users/tf_user/.aws/creds"
  profile                 = "customprofile"
}

Resources:
	Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records

Example
	resource "aws_instance" "web" {
 	 ami           = "ami-a1b2c3d4"
  	instance_type = "t2.micro"
	}

A resource block declares a resource of a given type ("aws_instance") with a given local name ("web"). The name is used to refer to this resource from elsewhere in the same Terraform module, but has no significance outside of the scope of a module.

Note: Each resource type in turn belongs to a provider,

Stages in the terraform
---------------------------

1.	Write : IAC
2.  plan:: plan  the changes before applying
3.  Create:: Reproduce the infrastuture

Use case: Creating a docker container from image.
https://github.com/anandvamsi/terraform-recipes-/blob/master/docker/container_creation/main.tf

Use case : creating a docker container from the variables
https://github.com/anandvamsi/terraform-recipes-/blob/master/docker/container_creation/main.tf

Use Case :: Breaking up the main file and splitting.
https://github.com/anandvamsi/terraform-recipes-/blob/master/docker/container_vars_break/variable.tf

use Case: Creating a instance
https://github.com/anandvamsi/terraform-recipes-/tree/master/single-instance


terraform state show 
Terraform refresh: Reconciling real-world drift
lifecycle option 
	- delete option 

#IAM users
		- using count 
		- Using list custom list

#S3 bucket
		 - Bucket creation
		 - Bucket life cycle creation 


#terraform show 
------------------
	will show all the output/metadata of the resource

[root@kworkernode1 example1]# terraform show
# docker_container.container_id:
resource "docker_container" "container_id" {
    attach           = false
    gateway          = "172.17.0.1"
    id               = "cfc9e3d4bfec8657a83100d71d00bf5174cff63e6bfd9b76bf3d3c25db70b348"
    image            = "sha256:f3b796dbbc456ea9d1dfe7391f9265cf3c529ae6eb6b6c519db9f54e3e758d6a"
    ip_address       = "172.17.0.2"
    ip_prefix_length = 16
    log_driver       = "json-file"
    logs             = false
    must_run         = true
    name             = "myblog"
    network_data     = [
        {
            gateway          = "172.17.0.1"
            ip_address       = "172.17.0.2"
            ip_prefix_length = 16
            network_name     = "bridge"
        },
    ]
    restart          = "no"
    rm               = false
    start            = true

    ports {
        external = 801
        internal = 2368
        ip       = "0.0.0.0"
        protocol = "tcp"
    }
}

# docker_image.image_id:
resource "docker_image" "image_id" {
    id     = "sha256:f3b796dbbc456ea9d1dfe7391f9265cf3c529ae6eb6b6c519db9f54e3e758d6adocker.io/ghost"
    latest = "sha256:f3b796dbbc456ea9d1dfe7391f9265cf3c529ae6eb6b6c519db9f54e3e758d6a"
    name   = "docker.io/ghost"
}

Outputs:

container_name = "myblog"
ip_address = "172.17.0.2"

terraform state show
----------------------------
To inspect only specfic resources

 terraform state show aws_instance.example


terraform refresh
-------------------
What Terraform is doing here is reconciling the resources tracked by the state file with the real world

It does this by querying your infrastructure providers to find out what's actually running and the current configuration, and updating the state file with this new information. Terraform is designed to co-exist with other tools as well as manually provisioned resources and so it only refreshes resources under its management.

Notes:
Running refresh does not modify infrastructure, but does modify the state file

[root@kworkernode1 example2]# cksum terraform.tfstate
1438403226 5653 terraform.tfstate

Do the changes to the resources
[root@kworkernode1 example2]# cksum terraform.tfstate
452845953 5701 terraform.tfstate

Lifecycle options: Configuring how Terraform manages drift
----------------------------------------------------------------
Preventing Reprovision of Resource using Lifecycle Hooks

lifecycle {
    prevent_destroy = true
  }

Terraform provides some lifecycle configuration options for every resource, regardless of provider, that give you more control over how Terraform reconciles your desired configuration against state when generating plans.

One of these options is prevent_destroy. When this is set to true, any plan that includes a destroy of this resource will return an error message. Use this flag to provide extra protection against the accidental deletion of any essential resources


Life cycle hooks
----------------------------------------

resource "digitalocean_droplet" "db" {
    lifecycle {
        prevent_destroy = true
        ignore_changes = ["image", ]
    }
}

By adding the ignore_changes  parameter to the lifecycle  block, we can tell our Terraform resource definition to ignore any changes to the image  field. This makes sure that Terraform does not attempt to reprovision the resource whenever the image changes
